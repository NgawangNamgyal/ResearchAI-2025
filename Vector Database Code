
#PINECONE_API_KEY is an env var, if you need it, then contact me via my email namgylan@bxscience.edu
#OPENAI_API_KEY is an env var, if you need it, then contact me via my email namgylan@bxscience.edu

from pinecone import Pinecone, ServerlessSpec
import os
# load_list.py
import json



pc = Pinecone(api_key=os.environ.get("PINECONE_API_KEY"))
index_name = "developer-quickstart-py"

if not pc.has_index(index_name):
    pc.create_index_for_model(
        name=index_name,
        cloud="aws",
        region="us-east-1",
        embed={
            "model":"llama-text-embed-v2",
            "field_map":{"text": "chunk_text"}
        }
    )
index = pc.Index(index_name)

def build_records(texts, categories=None):
    """
    Given:
      - texts: a list of strings (your document chunks)
      - categories: an optional list of the same length with category names
    Returns:
      - A list of record dicts ready for index.upsert_records()
    """
    records = []
    for i, text in enumerate(texts, start=1):
        rec = {
            "_id": f"rec{i}",
            "chunk_text": text
        }
        if categories:
            rec["category"] = categories[i-1]
        records.append(rec)
    return records

# --- Usage example ---
with open("data.json", "r") as f:
    texts = json.load(f)
print(texts)


# (Optional) parallel list of categories
#     categories = [
#         "history",
#         "science",
#         "science",
#         "history",
#         # â€¦
#     ]

# Build your records list in one line:
records = build_records(texts)

# Then upsert:
index.upsert_records("ns1", records)

query = "P21 Space Group"
#phrase it as a question. "What are..." for higher accuracy
results = index.search(
    namespace="ns1",
    query={
        "top_k": 1,
        "inputs": {
            'text': query
        }
    }
)

print(results)
